{"version":3,"sources":["sortingVisualizer/Algorithms/MergeSort.js","sortingVisualizer/sortingVisualizer.jsx","App.js","index.js"],"names":["mergeSortHelper","mainArray","startIdx","endIdx","auxiliaryArray","animations","middleIdx","Math","floor","k","i","j","push","doMerge","MergeSort","array","length","slice","SortingVisualizer","state","this","resetArray","SIZE","randomNumber","setState","minimum","maximum","round","random","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","className","map","value","idx","onClick","mergeSort","Component","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7837eda8.chunk.js","sourcesContent":["function MergeSort(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\n  export default MergeSort;","import React, { Component } from 'react';\r\nimport './sortingVisualizer.css';\r\nimport MergeSort from \"./Algorithms/MergeSort\";\r\n\r\n\r\nvar SIZE = 290;\r\nconst PRIMARY_COLOR = 'turquoise';\r\nconst SECONDARY_COLOR = 'red';\r\nconst ANIMATION_SPEED_MS = 3;\r\n\r\n\r\nclass SortingVisualizer extends Component{\r\n    \r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            array : []\r\n        };\r\n    }\r\n    \r\n    componentWillMount(){\r\n        this.resetArray();\r\n    }\r\n    \r\n    resetArray(){\r\n        const array =[]\r\n        \r\n        for(let i=0; i<(SIZE-1); i++ ){\r\n        array.push(this.randomNumber(6,600));\r\n        }\r\n        array.push(600);\r\n        this.setState({array});\r\n\r\n    }\r\n\r\n    randomNumber(minimum, maximum){\r\n        return Math.round( Math.random() * (maximum - minimum) + minimum);\r\n    }\r\n    mergeSort() {\r\n        const animations = MergeSort(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n          const isColorChange = i % 3 !== 2;\r\n          if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          }\r\n        }\r\n      }\r\n\r\n    quickSort(){}   \r\n    heapSort() {}  \r\n    bubbleSort() {}\r\n\r\n    render(){\r\n        const {array} = this.state;\r\n        return(\r\n           <div>\r\n            <div className=\"arrays\">\r\n              {array.map((value,idx) => (\r\n                  <div \r\n                  className=\"array-bar\" \r\n                  key={idx}\r\n                  style={{height:`${value}px`}}\r\n                  ></div>\r\n              ))}\r\n            </div>\r\n            <div className=\"Navbar\">\r\n                 <button className=\"gen-button\" onClick={()=>this.resetArray()}>Genrate New Array</button> \r\n                 <div className=\"separator\"></div>\r\n                 <button className=\"sort-button\" onClick={()=>this.mergeSort()}>Merge Sort</button>\r\n                 <button className=\"sort-button\" onClick={()=>this.mergeSort()}>Quick Sort</button>  \r\n                 <button className=\"sort-button\" onClick={()=>this.mergeSort()}>Heap Sort</button>\r\n                 <button className=\"sort-button\" onClick={()=>this.mergeSort()}>Bubble Sort</button>\r\n                 <div className=\"separator\"></div>\r\n            </div>\r\n           </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortingVisualizer\r\n","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './sortingVisualizer/sortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n        <header className=\"App-header\">\n            <title>Sorting Visualizer</title>\n        </header>\n\n        <SortingVisualizer />\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}